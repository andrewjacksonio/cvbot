name: Terraform Plan

on:
  pull_request:
    branches: [main, master]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'
  push:
    branches: [main, master]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'

env:
  TF_VERSION: 1.9.2

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    # Permissions for commenting on PRs
    permissions:
      contents: read
      pull-requests: write
    
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate
      
      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          project_name = "cvbot"
          environment = "prod"
          aws_region = "${{ secrets.AWS_REGION }}"
          bedrock_models = [
            "amazon.nova-micro-v1",
            "anthropic.claude-3-sonnet-20240229-v1:0",
            "amazon.titan-text-express-v1"
          ]
          enable_bedrock_logging = true
          EOF
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        continue-on-error: true
      
      - name: Save Plan Output
        if: steps.plan.outcome == 'success'
        run: terraform show -no-color tfplan > plan_output.txt
      
      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read plan output
            let planOutput = '';
            try {
              planOutput = fs.readFileSync('terraform/plan_output.txt', 'utf8');
            } catch (error) {
              planOutput = 'Plan output not available';
            }
            
            // Truncate if too long for GitHub comment
            if (planOutput.length > 60000) {
              planOutput = planOutput.substring(0, 60000) + '\n\n... (truncated)';
            }
            
            const output = `## Terraform Plan Results
            
            #### Format Check üñå \`${{ steps.fmt.outcome }}\`
            #### Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Plan üìñ \`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`terraform
            ${planOutput}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }
      
      - name: Upload Plan Artifact
        if: steps.plan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            terraform/tfplan
            terraform/plan_output.txt
          retention-days: 5
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
        continue-on-error: true
      
      - name: Upload Checkov Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif
